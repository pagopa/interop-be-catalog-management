akka {
  loglevel = "ERROR"
  actor.provider = cluster
  actor.warn-about-java-serializer-usage = on
  actor.allow-java-serialization = on
  coordinated-shutdown.exit-jvm = on

  actor {
    serializers {
      e-service-added = "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.EServiceAddedSerializer"
    }
    serialization-identifiers {
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.EServiceAddedSerializer" = 100000
      "java.io.serializable" = none
      "akka.projection.internal.ProjectionSerializer" = 1558148900
    }
    serialization-bindings {
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.EServiceAdded" = e-service-added
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    journal.auto-start-journals = ["akka.persistence.cassandra.journal"]
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    cassandra {
      events-by-tag {
        bucket-size = "Day"
        eventual-consistency-delay = 2s
        flush-interval = 50ms
        pubsub-notification = on
        first-time-bucket = "20200815T00:00"
      }
      query {
        refresh-interval = 2s
      }
      journal.keyspace = "pdnd_interop_uservice_agreement_management_e_service"
      snapshot.keyspace = "pdnd_interop_uservice_agreement_management_e_service_snap"
    }
  }

  projection {
    cassandra.offset-store.keyspace = "pdnd_interop_uservice_agreement_management_e_service_proj"
    cassandra.session-config-path = "akka.persistence.cassandra"
    restart-backoff {
      min-backoff = 3s
      max-backoff = 30s
      random-factor = 0.2
      max-restarts = -1
    }

    grouped {
      group-after-envelopes = 20
      group-after-duration = 500 ms
    }

    management {
      operation-timeout = 10 s
      ask-timeout = 3 s
    }
  }

  typed {
    stash-capacity = 200000
  }
}

datastax-java-driver {
  basic {
    contact-points = [ "cluster1-dc1-service.cassandra-operator.svc.cluster.local:9042" ]
    load-balancing-policy.local-datacenter = "dc1"
  }
  advanced {
    reconnect-on-init = true
    auth-provider {
      class = PlainTextAuthProvider
      username = ${CASSANDRA_USER}
      password = ${CASSANDRA_PWD}
    }
  }
}

akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
      required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
    }
  }
}

akka.management {
  health-checks {
    readiness-checks {
      ready = "it.pagopa.pdnd.interop.uservice.catalogmanagement.server.impl.HealthCheck"
    }
    liveness-checks {
      live = "it.pagopa.pdnd.interop.uservice.catalogmanagement.server.impl.LiveCheck"
    }
  }
}

kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
  }
}

kamon.instrumentation.akka.http {
  server {
    propagation {
      enabled = yes
      channel = default
    }
  }

  client {
    propagation {
      enabled = yes
      channel = default
    }
  }
}

kamon.instrumentation.akka.http {
  server.metrics {
    enabled = yes
  }
}

kamon.instrumentation.akka.http {
  server {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }

  client {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }
}

pdnd-interop-uservice-catalog-management {
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
}

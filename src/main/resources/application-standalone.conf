akka {

  management {
    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.catalogmanagement.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.catalogmanagement.server.impl.LiveCheck"
      }
    }
  }

  actor {
    provider = cluster
    warn-about-java-serializer-usage = on
    allow-java-serialization = on
    serializers {
      catalog-item-added = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemAddedSerializer"
      cloned-catalog-item-added = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.ClonedCatalogItemAddedSerializer"
      catalog-item-updated = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemUpdatedSerializer"
      catalog-item-deleted = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDeletedSerializer"
      catalog-item-with-descriptor-deleted = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemWithDescriptorsDeletedSerializer"
      catalog-item-descriptor-added = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDescriptorAddedSerializer"
      catalog-item-descriptor-updated = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDescriptorUpdatedSerializer"
      catalog-item-document-added = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDocumentAddedSerializer"
      catalog-item-document-deleted = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDocumentDeletedSerializer"
      catalog-item-document-updated = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDocumentUpdatedSerializer"
      state = "it.pagopa.interop.catalogmanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemAddedSerializer" = 100000
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.ClonedCatalogItemAddedSerializer" = 100004
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemWithDescriptorsDeletedSerializer" = 100001
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDeletedSerializer" = 100005
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemUpdatedSerializer" = 100002
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDocumentUpdatedSerializer" = 100003
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDescriptorAddedSerializer" = 100006
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDescriptorUpdatedSerializer" = 100007
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDocumentAddedSerializer" = 100008
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.CatalogItemDocumentDeletedSerializer" = 100009
      "it.pagopa.interop.catalogmanagement.model.persistence.serializer.StateSerializer" = 200000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemAdded" = catalog-item-added
      "it.pagopa.interop.catalogmanagement.model.persistence.ClonedCatalogItemAdded" = cloned-catalog-item-added
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemUpdated" = catalog-item-updated
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemDeleted" = catalog-item-deleted
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemWithDescriptorsDeleted" = catalog-item-with-descriptor-deleted
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemDescriptorAdded" = catalog-item-descriptor-added
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemDescriptorUpdated" = catalog-item-descriptor-updated
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemDocumentAdded" = catalog-item-document-added
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemDocumentDeleted" = catalog-item-document-deleted
      "it.pagopa.interop.catalogmanagement.model.persistence.CatalogItemDocumentUpdated" = catalog-item-document-updated
      "it.pagopa.interop.catalogmanagement.model.persistence.State" = state
    }
  }

  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka://interop-be-catalog-management@127.0.0.1:2552"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  }

  projection {
    enabled = false
  }

  typed {
    stash-capacity = 200000
  }
}

catalog-management {
  port = 8088
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  persistence = "memory"
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }
  storage {
    kind = "S3"
    container = "local"
    eservice-docs-path = "eservices/docs"
  }
}

interop-commons {
  storage {
    type = "File"
  }

  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor.fixed-pool-size-min = 4
} 

akka {
  loglevel = "ERROR"
  actor.provider = cluster
  actor.warn-about-java-serializer-usage = on
  actor.allow-java-serialization = on
  coordinated-shutdown.exit-jvm = on

  actor {
    serializers {
      catalog-item-added = "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.CatalogItemAddedSerializer"
      catalog-item-updated = "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.CatalogItemUpdatedSerializer"
      catalog-item-deleted = "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.CatalogItemDeletedSerializer"
      document-updated = "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.DocumentUpdatedSerializer"
      state = "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.CatalogItemAddedSerializer" = 100000
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.CatalogItemDeletedSerializer" = 100001
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.CatalogItemUpdatedSerializer" = 100002
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.DocumentUpdatedSerializer" = 100003
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.serializer.StateSerializer" = 200000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.CatalogItemAdded" = catalog-item-added
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.CatalogItemUpdated" = catalog-item-updated
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.CatalogItemDeleted" = catalog-item-deleted
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.DocumentUpdated" = document-updated
      "it.pagopa.pdnd.interop.uservice.catalogmanagement.model.persistence.State" = state
    }
  }

  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka://pdnd-interop-uservice-catalog-management@127.0.0.1:2552"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  }

  typed {
    stash-capacity = 200000
  }
}

akka.management {
  health-checks {
    readiness-checks {
      ready = "it.pagopa.pdnd.interop.uservice.catalogmanagement.server.impl.HealthCheck"
    }
    liveness-checks {
      live = "it.pagopa.pdnd.interop.uservice.catalogmanagement.server.impl.LiveCheck"
    }
  }
}

kamon.prometheus {
  embedded-server {
    hostname = 0.0.0.0
  }
}

kamon.instrumentation.akka.http {
  server {
    propagation {
      enabled = yes
      channel = default
    }
  }

  client {
    propagation {
      enabled = yes
      channel = default
    }
  }
}

kamon.instrumentation.akka.http {
  server.metrics {
    enabled = yes
  }
}

kamon.instrumentation.akka.http {
  server {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }

  client {
    tracing {
      enabled = yes
      span-metrics = on
    }
  }
}

uservice-catalog-management {
  port = 8088
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  persistence = "memory"
}

pdnd-uservice-uservice-catalog-management {
  aws {
    s3-bucket-name = "interop-pdnd-dev-support"
    access-key-id = ${AWS_ACCESS_KEY_ID}
    secret-access-key = ${AWS_SECRET_ACCESS_KEY}
  }
}
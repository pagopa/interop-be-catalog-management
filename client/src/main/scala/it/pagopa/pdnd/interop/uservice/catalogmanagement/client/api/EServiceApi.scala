/**
 * Catalog Management Micro Service
 * Service implementing the persistence of e-services
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.catalogmanagement.client.api

import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.EService
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.EServiceDescriptor
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.EServiceDescriptorSeed
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.EServiceDoc
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.EServiceSeed
import java.io.File
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.Problem
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.UpdateEServiceDescriptorDocumentSeed
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.UpdateEServiceDescriptorSeed
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.model.UpdateEServiceSeed
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.invoker._
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.catalogmanagement.client.invoker.ApiKeyLocations._

object EServiceApi {

  def apply(baseUrl: String = "https://gateway.interop.pdnd.dev/pdnd-interop-uservice-catalog-management/}") = new EServiceApi(baseUrl)
}

class EServiceApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 204 :  (EService Descriptor status archived)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param descriptorId The Descriptor Id
   */
  def archiveDescriptor(eServiceId: String, descriptorId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/archive", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : EService (Cloned EService with a new draft descriptor updated.)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   * @param descriptorId the descriptor Id
   */
  def cloneEServiceByDescriptor(eServiceId: UUID, descriptorId: UUID)(implicit bearerToken: BearerToken): ApiRequest[EService] =
    ApiRequest[EService](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/clone", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[EService](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : EServiceDescriptor (EService Descriptor created.)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param eServiceDescriptorSeed A E-Service Descriptor seed
   */
  def createDescriptor(eServiceId: String, eServiceDescriptorSeed: EServiceDescriptorSeed)(implicit bearerToken: BearerToken): ApiRequest[EServiceDescriptor] =
    ApiRequest[EServiceDescriptor](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors", "application/json")
      .withCredentials(bearerToken).withBody(eServiceDescriptorSeed)
      .withPathParam("eServiceId", eServiceId)
      .withSuccessResponse[EServiceDescriptor](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : EService (EService created)
   *   code 400 : Problem (Invalid input)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceSeed A E-Service seed
   */
  def createEService(eServiceSeed: EServiceSeed)(implicit bearerToken: BearerToken): ApiRequest[EService] =
    ApiRequest[EService](ApiMethods.POST, baseUrl, "/eservices", "application/json")
      .withCredentials(bearerToken).withBody(eServiceSeed)
      .withSuccessResponse[EService](200)
      .withErrorResponse[Problem](400)
      

  /**
   * Expected answers:
   *   code 200 : EService (EService Document created)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   * @param descriptorId the descriptor Id
   * @param kind 
   * @param description 
   * @param doc 
   */
  def createEServiceDocument(eServiceId: String, descriptorId: String, kind: String, description: String, doc: File)(implicit bearerToken: BearerToken): ApiRequest[EService] =
    ApiRequest[EService](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/documents", "multipart/form-data")
      .withCredentials(bearerToken).withFormParam("kind", kind)
      .withFormParam("description", description)
      .withFormParam("doc", doc)
      .withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[EService](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 204 :  (EService draft Descriptor deleted)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   * @param descriptorId the descriptor Id
   */
  def deleteDraft(eServiceId: String, descriptorId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 204 :  (EService deleted)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   */
  def deleteEService(eServiceId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/eservices/{eServiceId}", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 204 :  (Document deleted.)
   *   code 404 : Problem (E-Service descriptor document not found)
   *   code 400 : Problem (Bad request)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   * @param descriptorId the descriptor Id
   * @param documentId the document id
   */
  def deleteEServiceDocument(eServiceId: String, descriptorId: String, documentId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/documents/{documentId}", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withPathParam("documentId", documentId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      

  /**
   * Expected answers:
   *   code 204 :  (EService Descriptor status deprecated)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param descriptorId The Descriptor Id
   */
  def deprecateDescriptor(eServiceId: String, descriptorId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/deprecate", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 204 :  (EService Descriptor status changed in draft)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param descriptorId The Descriptor Id
   */
  def draftDescriptor(eServiceId: String, descriptorId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/draft", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : EService (EService retrieved)
   *   code 404 : Problem (EService not found)
   *   code 400 : Problem (Bad request)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   */
  def getEService(eServiceId: String)(implicit bearerToken: BearerToken): ApiRequest[EService] =
    ApiRequest[EService](ApiMethods.GET, baseUrl, "/eservices/{eServiceId}", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withSuccessResponse[EService](200)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      

  /**
   * Expected answers:
   *   code 200 : EServiceDoc (EService document retrieved)
   *   code 404 : Problem (EService not found)
   *   code 400 : Problem (Bad request)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   * @param descriptorId the descriptor Id
   * @param documentId the document id
   */
  def getEServiceDocument(eServiceId: String, descriptorId: String, documentId: String)(implicit bearerToken: BearerToken): ApiRequest[EServiceDoc] =
    ApiRequest[EServiceDoc](ApiMethods.GET, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/documents/{documentId}", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withPathParam("documentId", documentId)
      .withSuccessResponse[EServiceDoc](200)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      

  /**
   * Expected answers:
   *   code 200 : Seq[EService] (A list of EService)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param producerId 
   * @param status 
   */
  def getEServices(producerId: Option[String] = None, status: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[Seq[EService]] =
    ApiRequest[Seq[EService]](ApiMethods.GET, baseUrl, "/eservices", "application/json")
      .withCredentials(bearerToken).withQueryParam("producerId", producerId)
      .withQueryParam("status", status)
      .withSuccessResponse[Seq[EService]](200)
      

  /**
   * Expected answers:
   *   code 204 :  (EService Descriptor status published.)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param descriptorId The Descriptor Id
   */
  def publishDescriptor(eServiceId: String, descriptorId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/publish", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 204 :  (EService Descriptor status suspended)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param descriptorId The Descriptor Id
   */
  def suspendDescriptor(eServiceId: String, descriptorId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/suspend", "application/json")
      .withCredentials(bearerToken).withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : EService (EService Descriptor published)
   *   code 400 : Problem (Invalid input)
   *   code 404 : Problem (Not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id
   * @param descriptorId The Descriptor Id
   * @param updateEServiceDescriptorSeed A E-Service Descriptor seed
   */
  def updateDescriptor(eServiceId: String, descriptorId: String, updateEServiceDescriptorSeed: UpdateEServiceDescriptorSeed)(implicit bearerToken: BearerToken): ApiRequest[EService] =
    ApiRequest[EService](ApiMethods.PUT, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}", "application/json")
      .withCredentials(bearerToken).withBody(updateEServiceDescriptorSeed)
      .withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withSuccessResponse[EService](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : EService (E-Service updated)
   *   code 404 : Problem (E-Service not found)
   *   code 400 : Problem (Bad request)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId The E-Service id to update
   * @param updateEServiceSeed A E-Service update seed containing the possible updatable fields
   */
  def updateEServiceById(eServiceId: String, updateEServiceSeed: UpdateEServiceSeed)(implicit bearerToken: BearerToken): ApiRequest[EService] =
    ApiRequest[EService](ApiMethods.PUT, baseUrl, "/eservices/{eServiceId}", "application/json")
      .withCredentials(bearerToken).withBody(updateEServiceSeed)
      .withPathParam("eServiceId", eServiceId)
      .withSuccessResponse[EService](200)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      

  /**
   * Expected answers:
   *   code 200 : EServiceDoc (EService Descriptor Document updated.)
   *   code 404 : Problem (EService not found)
   *   code 400 : Problem (Bad request)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param eServiceId the eservice id
   * @param descriptorId the descriptor Id
   * @param documentId the document id
   * @param updateEServiceDescriptorDocumentSeed A payload containing the possible document updatable fields
   */
  def updateEServiceDocument(eServiceId: String, descriptorId: String, documentId: String, updateEServiceDescriptorDocumentSeed: UpdateEServiceDescriptorDocumentSeed)(implicit bearerToken: BearerToken): ApiRequest[EServiceDoc] =
    ApiRequest[EServiceDoc](ApiMethods.POST, baseUrl, "/eservices/{eServiceId}/descriptors/{descriptorId}/documents/{documentId}/update", "application/json")
      .withCredentials(bearerToken).withBody(updateEServiceDescriptorDocumentSeed)
      .withPathParam("eServiceId", eServiceId)
      .withPathParam("descriptorId", descriptorId)
      .withPathParam("documentId", documentId)
      .withSuccessResponse[EServiceDoc](200)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      



}

